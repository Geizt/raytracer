// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ({
    rt: (typeof exports !== "undefined" && exports !== null) && exports || this.rt || (this.rt = {})
  });

  rt.Plane = (function(_super) {

    __extends(Plane, _super);

    function Plane(normal, offset, surface) {
      if ((normal != null) && (offset != null) && (surface != null)) {
        if (!(typeof normal.IsValid === "function" ? normal.IsValid() : void 0) || !rt.MathLibrary.IsValid(offset) || !(typeof surface.IsValid === "function" ? surface.IsValid() : void 0)) {
          throw new TypeError;
        }
      } else {
        throw new TypeError;
      }
      this.normal = normal;
      this.offset = offset;
      this.surface = surface;
    }

    Plane.prototype.IsValid = function() {
      return this.normal.IsValid() && rt.MathLibrary.IsValid(this.offset) && this.surface.IsValid();
    };

    Plane.prototype.Normal = function(position) {
      return this.normal;
    };

    Plane.prototype.Intersect = function(ray) {
      var distance, projection;
      projection = this.normal.Dot(ray.direction);
      if (projection >= 0) {
        return null;
      } else {
        distance = (this.normal.Dot(ray.origin) + this.offset) / (-projection);
        return new rt.Intersection(this, ray, distance);
      }
    };

    return Plane;

  })(rt.GeometricObject);

}).call(this);
