// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ({
    rt: (typeof exports !== "undefined" && exports !== null) && exports || this.rt || (this.rt = {})
  });

  rt.Vector3D = (function(_super) {

    __extends(Vector3D, _super);

    function Vector3D(x, y, z) {
      if ((x != null) && !rt.MathLibrary.IsValid(x) || (y != null) && !rt.MathLibrary.IsValid(y) || (z != null) && !rt.MathLibrary.IsValid(z)) {
        throw new TypeError;
      } else {
        this.x = x != null ? x : 0.0;
        this.y = y != null ? y : 0.0;
        this.z = z != null ? z : 0.0;
      }
    }

    Vector3D.prototype.IsValid = function() {
      return rt.MathLibrary.IsValid(this.x) && rt.MathLibrary.IsValid(this.y) && rt.MathLibrary.IsValid(this.z);
    };

    Vector3D.prototype.SetZero = function() {
      this.x = 0.0;
      this.y = 0.0;
      this.z = 0.0;
      return this;
    };

    Vector3D.prototype.Set = function(x, y, z) {
      if (!(x != null) || !rt.MathLibrary.IsValid(x) || !(y != null) || !rt.MathLibrary.IsValid(y) || !(z != null) || !rt.MathLibrary.IsValid(z)) {
        throw new TypeError;
      } else {
        this.x = x;
        this.y = y;
        this.z = z;
      }
      return this;
    };

    Vector3D.prototype.SetV = function(vector) {
      if (vector != null) {
        if (!(typeof vector.IsValid === "function" ? vector.IsValid() : void 0)) {
          throw new TypeError;
        }
      } else {
        throw new TypeError;
      }
      this.x = vector.x;
      this.y = vector.y;
      this.z = vector.z;
      return this;
    };

    Vector3D.prototype.Negative = function() {
      return new rt.Vector3D(-this.x, -this.y, -this.z);
    };

    Vector3D.prototype.Copy = function() {
      return new rt.Vector3D(this.x, this.y, this.z);
    };

    Vector3D.prototype.Add = function(vector) {
      if (vector != null) {
        if (!(typeof vector.IsValid === "function" ? vector.IsValid() : void 0)) {
          throw new TypeError;
        }
      } else {
        throw new TypeError;
      }
      this.x += vector.x;
      this.y += vector.y;
      this.z += vector.z;
      return this;
    };

    Vector3D.prototype.Subtract = function(vector) {
      if (vector != null) {
        if (!(typeof vector.IsValid === "function" ? vector.IsValid() : void 0)) {
          throw new TypeError;
        }
      } else {
        throw new TypeError;
      }
      this.x -= vector.x;
      this.y -= vector.y;
      this.z -= vector.z;
      return this;
    };

    Vector3D.prototype.Scale = function(scalar) {
      if (!(scalar != null) || !rt.MathLibrary.IsValid(scalar)) {
        throw new TypeError;
      }
      this.x *= scalar;
      this.y *= scalar;
      this.z *= scalar;
      return this;
    };

    Vector3D.prototype.Magnitude = function() {
      return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
    };

    Vector3D.prototype.Normalize = function() {
      var invLength, magnitude;
      magnitude = this.Magnitude();
      if (magnitude <= Number.MIN_VALUE) {
        invLength = Infinity;
      } else {
        invLength = 1.0 / magnitude;
      }
      return this.Scale(invLength);
    };

    Vector3D.prototype.Dot = function(vector) {
      if (!(vector != null) || !vector.IsValid()) {
        throw new TypeError;
      }
      return this.x * vector.x + this.y * vector.y + this.z * vector.z;
    };

    Vector3D.prototype.Cross = function(vector) {
      var x, y, z;
      if (!(vector != null) || !vector.IsValid()) {
        throw new TypeError;
      }
      x = this.y * vector.z - this.z * vector.y;
      y = this.z * vector.x - this.x * vector.z;
      z = this.x * vector.y - this.y * vector.x;
      return new rt.Vector3D(x, y, z);
    };

    return Vector3D;

  })(rt.Object);

}).call(this);
