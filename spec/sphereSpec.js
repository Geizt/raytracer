// Generated by CoffeeScript 1.3.3
(function() {

  ({
    rt: (typeof exports !== "undefined" && exports !== null) && exports || this.rt || (this.rt = {})
  });

  describe('Sphere', function() {
    var center, radius, sphere, surface;
    center = null;
    radius = null;
    surface = null;
    sphere = null;
    beforeEach(function() {
      center = new rt.Vector3D(0.0, 1.0, -5.0);
      radius = 1.0;
      surface = new rt.ReflectiveSurface();
      sphere = new rt.Sphere(center, radius, surface);
    });
    it('is an object', function() {
      return expect(sphere instanceof rt.Object).toBe(true);
    });
    it('is a geometric object', function() {
      return expect(sphere instanceof rt.GeometricObject).toBe(true);
    });
    it('can be validated', function() {
      var valid_sphere;
      valid_sphere = sphere.IsValid();
      return expect(valid_sphere).toBe(true);
    });
    it('can calculate a normal', function() {
      var normal, position;
      position = new rt.Vector3D(3.0, 1.0, 0.0);
      normal = sphere.Normal(position);
      expect(normal.x).toBe(0.5144957554275265);
      expect(normal.y).toBe(0.0);
      return expect(normal.z).toBe(0.8574929257125441);
    });
    return it('can calculate an intersection', function() {
      var direction, intersection, origin, ray;
      origin = new rt.Vector3D(0.0, 0.0, 0.0);
      direction = new rt.Vector3D(0.0, 0.0, -1.0);
      ray = new rt.Ray(origin, direction);
      intersection = sphere.Intersect(ray);
      return expect(intersection instanceof rt.Intersection).toBe(true);
    });
  });

}).call(this);
