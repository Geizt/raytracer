// Generated by CoffeeScript 1.3.3
(function() {

  ({
    rt: (typeof exports !== "undefined" && exports !== null) && exports || this.rt || (this.rt = {})
  });

  describe('Vector3D', function() {
    var vector3d;
    vector3d = null;
    beforeEach(function() {
      vector3d = new rt.Vector3D(2, 3, 4);
    });
    it('can be initialized', function() {
      expect(vector3d.x).toBe(2);
      expect(vector3d.y).toBe(3);
      return expect(vector3d.z).toBe(4);
    });
    it('can be validated', function() {
      var valid_vector3d;
      valid_vector3d = vector3d.IsValid();
      return expect(valid_vector3d).toBe(true);
    });
    it('can be re-set', function() {
      vector3d.Set(3, 5, 7);
      expect(vector3d.x).toBe(3);
      expect(vector3d.y).toBe(5);
      return expect(vector3d.z).toBe(7);
    });
    it('can be negative', function() {
      var neg_vector3d;
      neg_vector3d = vector3d.Negative();
      expect(neg_vector3d.x).toBe(-2);
      expect(neg_vector3d.y).toBe(-3);
      return expect(neg_vector3d.z).toBe(-4);
    });
    it('can be copied', function() {
      var copy_vector3d;
      copy_vector3d = vector3d.Copy();
      expect(copy_vector3d.x).toBe(2);
      expect(copy_vector3d.y).toBe(3);
      return expect(copy_vector3d.z).toBe(4);
    });
    it('can be added', function() {
      vector3d.Add(new rt.Vector3D(1, 2, 3));
      expect(vector3d.x).toBe(3);
      expect(vector3d.y).toBe(5);
      return expect(vector3d.z).toBe(7);
    });
    it('can be subtracted', function() {
      vector3d.Subtract(new rt.Vector3D(1, 2, 3));
      expect(vector3d.x).toBe(1);
      expect(vector3d.y).toBe(1);
      return expect(vector3d.z).toBe(1);
    });
    it('can be scaled by a scalar', function() {
      vector3d.Scale(3);
      expect(vector3d.x).toBe(6);
      expect(vector3d.y).toBe(9);
      return expect(vector3d.z).toBe(12);
    });
    it('can be normalized', function() {
      var magnitude;
      magnitude = vector3d.Normalize().Magnitude();
      return expect(magnitude).toBe(1);
    });
    it('can calculate the dot product', function() {
      var dot_product;
      dot_product = vector3d.Dot(new rt.Vector3D(4, 5, 6));
      return expect(dot_product).toBe(47);
    });
    return it('can calculate the cross product', function() {
      var cross_product;
      cross_product = vector3d.Cross(new rt.Vector3D(4, 5, 6));
      expect(cross_product.x).toBe(-2);
      expect(cross_product.y).toBe(4);
      return expect(cross_product.z).toBe(-2);
    });
  });

}).call(this);
