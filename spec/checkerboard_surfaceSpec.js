// Generated by CoffeeScript 1.3.3
(function() {

  ({
    rt: (typeof exports !== "undefined" && exports !== null) && exports || this.rt || (this.rt = {})
  });

  describe('CheckerboardSurface', function() {
    var checkerboard_surface, position_1, position_2;
    position_1 = null;
    position_2 = null;
    checkerboard_surface = null;
    beforeEach(function() {
      position_1 = new rt.Vector3D(2.0, 3.0, 4.0);
      position_2 = new rt.Vector3D(4.5, 6.0, 7.8);
      checkerboard_surface = new rt.CheckerboardSurface();
    });
    it('is a object', function() {
      return expect(checkerboard_surface instanceof rt.Object).toBe(true);
    });
    it('is a surface', function() {
      return expect(checkerboard_surface instanceof rt.Surface).toBe(true);
    });
    it('can be validated', function() {
      var valid_checkerboard_surface;
      valid_checkerboard_surface = checkerboard_surface.IsValid();
      return expect(valid_checkerboard_surface).toBe(true);
    });
    it('has a roughness', function() {
      return expect(checkerboard_surface.roughness).toBe(150);
    });
    it('can reflect', function() {
      var reflection_1, reflection_2;
      reflection_1 = checkerboard_surface.Reflect(position_1);
      reflection_2 = checkerboard_surface.Reflect(position_2);
      expect(reflection_1).toBe(0.7);
      return expect(reflection_2).toBe(0.1);
    });
    it('has a diffuse reflection', function() {
      var diffuse_reflection_1, diffuse_reflection_2;
      diffuse_reflection_1 = checkerboard_surface.Diffuse(position_1);
      diffuse_reflection_2 = checkerboard_surface.Diffuse(position_2);
      expect(diffuse_reflection_1.red).toBe(0.0);
      expect(diffuse_reflection_1.green).toBe(0.0);
      expect(diffuse_reflection_1.blue).toBe(0.0);
      expect(diffuse_reflection_2.red).toBe(1.0);
      expect(diffuse_reflection_2.green).toBe(1.0);
      return expect(diffuse_reflection_2.blue).toBe(1.0);
    });
    return it('has a specular reflection', function() {
      var specular_reflection;
      specular_reflection = checkerboard_surface.Specular(position_1);
      expect(specular_reflection.red).toBe(1.0);
      expect(specular_reflection.green).toBe(1.0);
      return expect(specular_reflection.blue).toBe(1.0);
    });
  });

}).call(this);
